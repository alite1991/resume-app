{"version":3,"sources":["components/Fullpage.js","components/DownIcon.js","sections/TitlesAndIcons.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","DownIcon","onClick","style","display","flexDirection","alignItems","justifyContent","marginBottom","transform","maxWidth","src","icon","TitlesAndIcons","state","color","changeColor","setState","onMouseOver","onMouseLeave","data","title","subtitle","Object","keys","links","map","key","url","activeClass","to","spy","smooth","offset","duration","delay","icons","down","console","log","name","AboutSection","sections","items","p","content","SkillCard","skill","image","SkillSection","eachSkill","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2jCAceA,G,uLAVF,IACEC,EAAUC,KAAKC,MAAfF,SACP,OACI,yBAAKG,UAAS,mBAAcF,KAAKC,MAAMC,WAAa,KAC/CH,O,GALMI,c,eCsBRC,EAvBA,SAACH,GACf,OACG,yBAAKI,QAASJ,EAAMI,QACpBC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,SAChBC,aAAc,QACdC,UAAW,sBAGb,yBACEN,MAAO,CACLO,SAAU,SAGZ,yBAAKC,IAAKb,EAAMc,U,QCgCPC,E,2MA3CbC,MAAQ,CACNC,MAAO,S,EAETC,YAAc,WACZ,EAAKC,SAAS,CACZF,MAA4B,UAArB,EAAKD,MAAMC,MAAoB,SAAW,W,wEAG3C,IAAD,OACP,OACE,6BAEE,kBAAC,EAAD,CAAUhB,UAAU,SAClB,wBACEA,UAAU,QACVI,MAAO,CAAEY,MAAOlB,KAAKiB,MAAMC,OAC3BG,YAAa,WACX,EAAKF,eAEPG,aAAc,WACZ,EAAKH,gBAGNI,EAAKC,OAER,6BACE,4BAAKD,EAAKE,WAEZ,yBAAKvB,UAAU,iBACZwB,OAAOC,KAAKJ,EAAKK,OAAOC,KAAI,SAAAC,GAC3B,OAAO,kBAAC,aAAD,CAAYC,IAAKR,EAAKK,MAAME,UAIzC,kBAAC,OAAD,CAAME,YAAY,SAASC,GAAG,QAAQC,KAAK,EAAMC,QAAQ,EAAMC,OAAQ,GAAIC,SAAU,IAAKC,MAAO,KACjG,kBAAC,EAAD,CAAUvB,KAAMQ,EAAKgB,MAAMC,KAAMnC,QAAS,kBAAKoC,QAAQC,IAAI,mBAE7D,kBAAC,UAAD,CAASC,KAAK,QAAQzC,UAAU,iB,GAtCTC,aCkBdyC,G,uLAjBP,OACI,kBAAC,EAAD,CAAU1C,UAAU,UACpB,4BACTqB,EAAKsB,SAAS,GAAGrB,OAEpB,yBAAKtB,UAAU,cACZqB,EAAKsB,SAAS,GAAGC,MAAMjB,KAAI,SAAAkB,GAC5B,OAAO,2BAAIA,EAAEC,kB,GAVY7C,cCeZ8C,G,uLAhBF,IACEC,EAAOlD,KAAKC,MAAZiD,MACP,OACI,yBAAKhD,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKY,IAAKoC,EAAMF,QAAQG,SAE5B,yBAAKjD,UAAU,uBACvB,4BAAKgD,EAAMF,QAAQxB,a,GATHrB,cCwBTiD,E,iLAnBP,OACI,kBAAC,EAAD,CAAUlD,UAAU,SACpB,4BACTqB,EAAKsB,SAAS,GAAGrB,OAEpB,yBAAKtB,UAAU,iBACZqB,EAAKsB,SAAS,GAAGC,MAAMjB,KAAI,SAAAwB,GAC5B,OACI,kBAAC,EAAD,CAAWH,MAAOG,a,GAXGlD,a,MCoBZmD,MAjBf,WACE,OACE,yBAAKpD,UAAU,OACb,yBAAKA,UAAU,eAIf,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCPcqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1f2e8262.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './Fullpage.css'\r\n\r\nclass Fullpage extends Component{\r\n    render(){\r\n        const {children}=this.props\r\n        return(\r\n            <div className={`fullpage ${this.props.className || ''}`}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fullpage","import React,{Component} from 'react'\r\n\r\nconst DownIcon=(props)=>{\r\n return(\r\n    <div onClick={props.onClick}\r\n    style={{\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      marginBottom: \"-34px\",\r\n      transform: \"translateY(-45px)\"\r\n    }}\r\n  >\r\n    <div\r\n      style={{\r\n        maxWidth: \"30px\"\r\n      }}\r\n    >\r\n      <img src={props.icon} />\r\n    </div>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default DownIcon","import React, { Component } from \"react\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport DownIcon from \"../components/DownIcon\"\r\nimport {Link, Element} from 'react-scroll'\r\n\r\nclass TitlesAndIcons extends Component {\r\n  state = {\r\n    color: \"white\"\r\n  };\r\n  changeColor = () => {\r\n    this.setState({\r\n      color: this.state.color === \"white\" ? \"yellow\" : \"white\"\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <Fullpage className=\"first\">\r\n          <h1\r\n            className=\"title\"\r\n            style={{ color: this.state.color }}\r\n            onMouseOver={() => {\r\n              this.changeColor();\r\n            }}\r\n            onMouseLeave={() => {\r\n              this.changeColor();\r\n            }}\r\n          >\r\n            {data.title}\r\n          </h1>\r\n          <div>\r\n            <h2>{data.subtitle}</h2>\r\n          </div>\r\n          <div className=\"icons-wrapper\">\r\n            {Object.keys(data.links).map(key => {\r\n              return <SocialIcon url={data.links[key]} />;\r\n            })}\r\n          </div>\r\n        </Fullpage>\r\n        <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} delay={100}>\r\n        <DownIcon icon={data.icons.down} onClick={()=> console.log(\"I'm working\")}/>\r\n        </Link>\r\n      <Element name=\"about\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TitlesAndIcons;\r\n","import React,{Component} from 'react';\r\nimport Fullpage from '../components/Fullpage'\r\nimport data from \"../data.json\";\r\nimport './AboutSection.css'\r\n\r\nclass AboutSection extends Component{\r\n    render(){\r\n       \r\n        return(\r\n            <Fullpage className=\"second\"> \r\n            <h3>\r\n  {data.sections[0].title}\r\n</h3>\r\n<div className=\"paragraphs\">\r\n  {data.sections[0].items.map(p=>{\r\n  return <p>{p.content}</p>\r\n  })\r\n\r\n  }\r\n</div>\r\n            </Fullpage>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutSection","import React,{Component} from 'react';\r\nimport './SkillCard.css'\r\n\r\nclass SkillCard extends Component{\r\n    render(){\r\n        const {skill}=this.props\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"image-wrapper\">\r\n                    <img src={skill.content.image}/>\r\n                </div>\r\n                <div className=\"skill-title-wrapper\">\r\n        <h4>{skill.content.title}</h4>\r\n                </div>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SkillCard","import React,{Component} from 'react';\r\nimport Fullpage from '../components/Fullpage'\r\nimport data from \"../data.json\";\r\nimport SkillCard from '../components/SkillCard'\r\n\r\nclass SkillSection extends Component{\r\n    render(){\r\n       \r\n        return(\r\n            <Fullpage className=\"third\"> \r\n            <h3>\r\n  {data.sections[1].title}\r\n</h3>\r\n<div className=\"cards-wrapper\">\r\n  {data.sections[1].items.map(eachSkill=>{\r\n  return (\r\n      <SkillCard skill={eachSkill} />\r\n  )\r\n  })\r\n\r\n  }\r\n</div>\r\n            </Fullpage>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SkillSection","import React from 'react';\n\nimport TitlesAndIcons from './sections/TitlesAndIcons'\nimport AboutSection from './sections/AboutSection'\nimport SkillSection from './sections/SkillSection'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"navigation\">\n  \n      </div>\n      \n      <TitlesAndIcons></TitlesAndIcons>\n      \n      <AboutSection></AboutSection>\n    \n      <SkillSection></SkillSection>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}